{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chann\\\\my-personal-webpage\\\\src\\\\components\\\\ProjectList.tsx\";\n// src/components/ProjectList.tsx\nimport React from 'react';\nimport ProjectCard from './ProjectCard';\n\n// Import CSS\nimport './ProjectList.css';\n\n// Define the interface for the component's props\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Use React.FC and type the props\n// Provide a default value for projects in case the prop is omitted\nconst ProjectList = ({\n  projects = []\n}) => {\n  // Handle empty or undefined projects array\n  if (projects.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No projects to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-list\",\n    children: projects.map(project =>\n    /*#__PURE__*/\n    // Spread the project properties directly into ProjectCard\n    // This works well if ProjectCardProps align with Project type keys\n    // Ensure 'key' is always provided separately for list rendering\n    _jsxDEV(ProjectCard, {\n      ...project\n    }, project.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n\n    // Or pass props individually (more explicit if types differ slightly):\n    /* <ProjectCard\r\n        key={project.id} // Unique key is crucial\r\n        title={project.title}\r\n        description={project.description}\r\n        imageUrl={project.imageUrl}\r\n        technologies={project.technologies}\r\n        liveUrl={project.liveUrl}\r\n        repoUrl={project.repoUrl}\r\n     /> */)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n// Default props handled by default parameter value: ({ projects = [] })\n_c = ProjectList;\nexport default ProjectList;\nvar _c;\n$RefreshReg$(_c, \"ProjectList\");","map":{"version":3,"names":["React","ProjectCard","jsxDEV","_jsxDEV","ProjectList","projects","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","project","id","_c","$RefreshReg$"],"sources":["C:/Users/chann/my-personal-webpage/src/components/ProjectList.tsx"],"sourcesContent":["// src/components/ProjectList.tsx\r\nimport React from 'react';\r\nimport ProjectCard from './ProjectCard';\r\n\r\n\r\n// Import CSS\r\nimport './ProjectList.css';\r\nexport type Project = { // Use 'export' if you need this type outside this file (e.g., in App.tsx)\r\n  id: string | number;\r\n  title: string;\r\n  description: string;\r\n  imageUrl?: string;\r\n  technologies?: string[];\r\n  liveUrl?: string;\r\n  repoUrl?: string;\r\n};\r\n\r\n// Define the interface for the component's props\r\ninterface ProjectListProps {\r\n  projects?: Project[]; // The list of projects is optional\r\n}\r\n\r\n// Use React.FC and type the props\r\n// Provide a default value for projects in case the prop is omitted\r\nconst ProjectList: React.FC<ProjectListProps> = ({ projects = [] }) => {\r\n\r\n  // Handle empty or undefined projects array\r\n  if (projects.length === 0) {\r\n    return <p>No projects to display.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"project-list\">\r\n      {projects.map((project) => (\r\n        // Spread the project properties directly into ProjectCard\r\n        // This works well if ProjectCardProps align with Project type keys\r\n        // Ensure 'key' is always provided separately for list rendering\r\n        <ProjectCard key={project.id} {...project} />\r\n\r\n        // Or pass props individually (more explicit if types differ slightly):\r\n        /* <ProjectCard\r\n            key={project.id} // Unique key is crucial\r\n            title={project.title}\r\n            description={project.description}\r\n            imageUrl={project.imageUrl}\r\n            technologies={project.technologies}\r\n            liveUrl={project.liveUrl}\r\n            repoUrl={project.repoUrl}\r\n         /> */\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Default props handled by default parameter value: ({ projects = [] })\r\n\r\nexport default ProjectList;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;;AAGvC;AACA,OAAO,mBAAmB;;AAW1B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA;AACA;AACA,MAAMC,WAAuC,GAAGA,CAAC;EAAEC,QAAQ,GAAG;AAAG,CAAC,KAAK;EAErE;EACA,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IACzB,oBAAOH,OAAA;MAAAI,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACvC;EAEA,oBACER,OAAA;IAAKS,SAAS,EAAC,cAAc;IAAAL,QAAA,EAC1BF,QAAQ,CAACQ,GAAG,CAAEC,OAAO;IAAA;IACpB;IACA;IACA;IACAX,OAAA,CAACF,WAAW;MAAA,GAAsBa;IAAO,GAAvBA,OAAO,CAACC,EAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB;;IAE5C;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;;AAED;AAAAK,EAAA,GA9BMZ,WAAuC;AAgC7C,eAAeA,WAAW;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}